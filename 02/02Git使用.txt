1、本地仓库

1.1工作流程
Git本地操作的三个区域：
	Git Repository（Git仓库）   ——最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见
	
	暂存区                                     ——暂存已经修改的文件，最后统一提交到git仓库中

	工作区（Working Directory） ——添加、编辑、修改文件等动作（正常写代码的区域）


工作区		——>		暂存区		——>		Git仓库
	  git add 文件名	      git commit -m "注释内容"
git status			git status			git status



1.2本地仓库操作

什么是仓库？仓库又名版本库，英文名repository，我们可以简单理解成是一个目录，用于存放代码，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除等操作Git都能跟踪到。

（1）在安装好后首次使用需要先进行全局设置
	桌面空白处，鼠标右键点击“Git Bash Here”以打开Git命令行窗口
	$ git config --global user.name "用户名"
	$ git config --global user.email "邮箱地址"
（注：用户名和邮箱建议与Github一致）
（这步做好后，在不换电脑或者不重装系统下，这一步就不用再做了）
（2）创建仓库
	当我们需要让Git去管理某个新项目/已存在项目的时候，就需要创建仓库了。注意，创建仓库时使用的目录不一定要求是空目录，选择一个非空目录也是可以的，但是不建议在现有项目上来学习Git，否则造成的一切后果概不负责。
	注意：为了避免在学习或使用过程中出现各种奇葩问题，请不要使用包含中文的目录名（父目录亦是如此）。
	a.  创建仓库（空目录）：mkdir 仓库名(目录名)(GitStudying)
	b. (在命令行中)进入项目目录：cd 目录名(GitStudying)
	c. Git仓库初始化（让Git知道，它需要来管理这个目录）：git init
		表现：执行之后会在项目目录下创建“.git”的隐藏目录，这个目录是Git所创建的，不能删除，也不能随意更改其中的内容。
（3）Git常用指令操作
a.查看当前状态：git status			【非必要】【根据需要去使用】
b.添加到缓存区：git add 文件名
（Git add指令，可以添加一个文件，也可以同时添加多个文件。
  语法1：git add 文件名
  语法2：git add 文件名1 文件名2 文件名3 ··· 
   语法3：git add .			【添加当前目录到缓存区中】
  ）
c.提交至版本库：git commit -m "注释内容"	【注释内容可以写中文】

在后续对文件（可以操作1个或多个文件）操作之后，重复使用git add与git commit指令即可。
即：后续每一次进行文件操作过后都要执行b和c步骤。



1.3时光穿梭机——版本回退

版本回退分为两步骤进行操作：
步骤：
	a.查看版本，确定需要回退到的时刻点
		指令：
			git log
			git log --pretty=oneline		【推荐用这一个】
	b.回退操作
		指令：
			git reset --hard 版本号(提交编号)

	c.回退过后，又想回到刚开始的那个状态
（由于使用：git log或者git log --pretty=oneline，版本号只会显示当前版本以及当前版本之前的版本序号）
所以注意：回到过去之后，要想再回到之前最新的版本的时候，则需要使用指令去查看历史操作，以得到最新版本的commit id。
		指令： 
			git reflog
	
小结：
a.要想回到过去，必须先得到commit id，然后通过git reset –hard进行回退；
b.要想回到未来，需要使用git reflog进行历史操作查看，得到最新的commit id；
c.在写回退指令的时候，commit id可以不用写全，git会自动识别，但是也不能写太少，至少需要写前4位字符。

	